#ifndef __PARAMETERESTIMATION_H__
#define __PARAMETERESTIMATION_H__

#include "RandomUtils.hpp"
#include "stochasticMethods.hpp"

typedef long double (*costFunction)(std::vector<std::vector<double>>&, std::vector<double>&);

typedef long double (*modelCostFunction)(stochasticModel model, std::vector<double>&, int, std::vector<double>);


long double multiVectorRMSE(std::vector<std::vector<double>>& simulations, std::vector<double>& actual);
long double multiVectorMSE(std::vector<std::vector<double>>& simulations, std::vector<double>& actual);

double sampleMean(std::vector<double>& observations);
double sampleVariance(std::vector<double>& observations);
long double normalPDF(double observation, double mean, double variance);
double normalCDF(double& observation, double& mean, double& variance);
long double returnComparison(std::vector<std::vector<double>>& simulations, std::vector<double>& actual);
double averageLogReturnComparison(std::vector<std::vector<double>> simulations, std::vector<double> actual);
double acceptanceProbability(double newState, double oldState, double temperature);
std::vector<double> simulatedAnnealingVolEstimation(stochasticModel model, int parameterSet, std::vector<double> observations, int numSimulations, double startingTemperature, double coolingRate, int stepsAtTemp, double temperatureLimit, costFunction cost);
std::vector<double> simulatedAnnealingDriftEstimation(stochasticModel model, int parameterSet, std::vector<double> observations, int numSimulations, double startingTemperature, double coolingRate, int stepsAtTemp, double temperatureLimit, costFunction cost);

long double driftCost(stochasticModel model, std::vector<double> &observations, int numSims, std::vector<double> optionalParams = {});
long double varianceCost(stochasticModel model, std::vector<double> &observations, int numSims, std::vector<double> optionalParams = {});
std::vector<double> paramEstimation(stochasticModel model, int parameterSet, std::vector<double> observations, int numSimsPerStep, double startingTemp, double coolingRate, int stepsAtTemp, double tempLimit, modelCostFunction costFunction, std::vector<double> optionalParams = {});

std::vector<double> polynomialParamEstimation(polynomialModel model, int parameterSet, std::vector<double> observations, int numSimsPerStep, double startingTemp, double coolingRate, int stepsAtTemp, double tempLimit, modelCostFunction costFunction, std::vector<double> optionalParams = {});

polynomialModel polynomialMultiEstimation(polynomialModel model, std::vector<int> parameterSets, std::vector<double> observations, int numSimsPerStep, double startingTemp, double coolingRate, int stepsAtTemp, double tempLimit, modelCostFunction costFunction, std::vector<double> optionalParams);


/**
 * @brief Estimates the value of an unknown pdf 
 * 
 * @param observations Observations of values generated by the pdf
 * @param input Pdf input to be estimated
 * @param percentage Ratio of observations that should be included in the window considered
 * @return double Estimated value of the unknown pdf at that input
 */
double estimatePdf(std::vector<double>& observations, double input, double percentage);

std::vector<long double> findLikelihood(stochasticModel model, std::vector<double> observations, int numSims, int divisions, double percentage);

/**
 * @brief Returns true if AIC1 is LOWER than AIC2. If AICs are both inf then compares the point they changed to inf. 
 * 
 * @param AIC1 {AIC, inf timestep}
 * @param AIC2 {AIC, inf timestep}
 * @return true If AIC1 is lower
 * @return false If AIC1 is not lower
 */
bool compareAIC(std::vector<long double> AIC1, std::vector<long double> AIC2);

#endif // __PARAMETERESTIMATION_H__